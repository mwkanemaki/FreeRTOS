

変数名プリフィックス
‘c’ for char, 
‘s’ for int16_t (short), 
‘l’ int32_t (long), 
‘x’ for BaseType_t 
and 
any other non-standard types 
structures, task handles,queue handles,etc.

‘u’　unsigned
‘p’　pointer

例
‘uc’ uint8_t
‘pc’ pointer to char 

関数名プリフィックス
返り値　と　定義されているファイル名　から決定されている
例
pvTimerGetTimerID() 
返り値　pointer to void
定義は　timers.c

ファイルスコープの関数(private)のプリフィックスは ‘prv’.








<<<<<6.3>>>>>
6.3 Deferred Interrupt Processing
遅延割り込み処理
割り込みサービスルーチンで処理するのでなくタスクで遅延的に処理する


リソース　例えば　変数　ペリフェラル　メモリバッファ

タスクから　あるいは　割り込みから　の同時アクセス　から　ガードしなければならない

すべての割り込みを受け付けられるわけではない

割り込み　nesting は複雑度を増加させる　予測可能性を低下させる

割り込み処理が短時間であるということは　多重化　の確率が低下する　ことを意味する

割り込み処理は　割り込みの原因を記録して、割り込みフラグをクリアする必要がある
その他の処理は通常しばしば、タスクで実行する
この方式によって、割り込み処理を短時間化できる

遅延割り込み処理　は　その他のタスクを含めて優先順序付けできる　
すべてのFreeRTOS API を使える　効能がある。

もし遅延割り込み処理を実行するタスクが優先順序最高ならば、割り込み処理内で実行されたのと同様である。


絶対的なルールはないが、複雑な処理が必要ならば、遅延割り込み処理


例えば AD変換の結果を保存するだけであれば、ISR内で実行するのが最適である。
ソフトウエアフィルタ処理を行うのであれば、遅延割り込みのタスク内で処理すべきだ。


<<<<<6.4>>>>>
6.4 Binary Semaphores Used for Synchronization

割り込み安全な仕様のバイナリセマフォAPIは
割り込み発生時にタスクをブロック解除に使用できる。
有効に割り込みにタスクを同期できる。

portYIELD_FROM_ISR()
遅延割り込み処理　タスク　に直接　遷移することを保証する。
ISR内にすべての処理を記述したのと同様　時間的に　連続的に　実行される。

補足説明
task notification　のほうが　割り込み発生時にタスクをブロック解除　効率がよい





portMAX_DELAY　が指定された場合　タイムアウト無し
INCLUDE_vTaskSuspend は 1　にセットしてある場合






///////////////////////////////////////////////////////////////
<<<<<9>>>>>
Chapter 9 Task Notifications

<<<<<9.1>>>>>


To include task notification functionality 
set
configUSE_TASK_NOTIFICATIONS to 1 
in FreeRTOSConfig.h.
























